/*
 * Copyright 2021 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package gradlebuild.docs.dsl.asciidoc;

import com.google.common.collect.ImmutableSet;
import gradlebuild.docs.dsl.source.model.ClassMetaData;
import gradlebuild.docs.model.SimpleClassMetaDataRepository;
import org.gradle.api.DefaultTask;
import org.gradle.api.file.DirectoryProperty;
import org.gradle.api.file.FileSystemOperations;
import org.gradle.api.file.RegularFileProperty;
import org.gradle.api.tasks.CacheableTask;
import org.gradle.api.tasks.InputFile;
import org.gradle.api.tasks.OutputDirectory;
import org.gradle.api.tasks.PathSensitive;
import org.gradle.api.tasks.PathSensitivity;
import org.gradle.api.tasks.TaskAction;

import javax.inject.Inject;
import java.io.IOException;
import java.io.Writer;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Set;

@CacheableTask
abstract public class GenerateDslAsciidoc extends DefaultTask {
    private static final Set<String> SELECTED_CLASSES = ImmutableSet.of(
        "org.gradle.api.Buildable",
        "org.gradle.api.BuildableModelElement",
        "org.gradle.api.DefaultTask",
        "org.gradle.api.NamedDomainObjectCollection",
        "org.gradle.api.NamedDomainObjectContainer",
        "org.gradle.api.NamedDomainObjectList",
        "org.gradle.api.NamedDomainObjectSet",
        "org.gradle.api.PolymorphicDomainObjectContainer",
        "org.gradle.api.Project",
        "org.gradle.api.Script",
        "org.gradle.api.Task",
        "org.gradle.api.artifacts.ComponentSelection",
        "org.gradle.api.artifacts.ComponentSelectionRules",
        "org.gradle.api.artifacts.Configuration",
        "org.gradle.api.artifacts.ConfigurationContainer",
        "org.gradle.api.artifacts.DependencySubstitutions",
        "org.gradle.api.artifacts.ResolutionStrategy",
        "org.gradle.api.artifacts.dsl.ArtifactHandler",
        "org.gradle.api.artifacts.dsl.ComponentMetadataHandler",
        "org.gradle.api.artifacts.dsl.ComponentModuleMetadataHandler",
        "org.gradle.api.artifacts.dsl.DependencyConstraintHandler",
        "org.gradle.api.artifacts.dsl.DependencyHandler",
        "org.gradle.api.artifacts.dsl.RepositoryHandler",
        "org.gradle.api.artifacts.query.ArtifactResolutionQuery",
        "org.gradle.api.artifacts.repositories.ArtifactRepository",
        "org.gradle.api.artifacts.repositories.AuthenticationContainer",
        "org.gradle.api.artifacts.repositories.AuthenticationSupported",
        "org.gradle.api.artifacts.repositories.IvyArtifactRepository",
        "org.gradle.api.artifacts.repositories.IvyArtifactRepositoryMetaDataProvider",
        "org.gradle.api.artifacts.repositories.MavenArtifactRepository",
        "org.gradle.api.artifacts.repositories.PasswordCredentials",
        "org.gradle.api.artifacts.repositories.UrlArtifactRepository",
        "org.gradle.api.artifacts.transform.TransformAction",
        "org.gradle.api.artifacts.transform.TransformOutputs",
        "org.gradle.api.artifacts.transform.TransformSpec",
        "org.gradle.api.credentials.AwsCredentials",
        "org.gradle.api.credentials.Credentials",
        "org.gradle.api.credentials.HttpHeaderCredentials",
        "org.gradle.api.distribution.Distribution",
        "org.gradle.api.distribution.DistributionContainer",
        "org.gradle.api.file.SourceDirectorySet",
        "org.gradle.api.initialization.ConfigurableIncludedBuild",
        "org.gradle.api.initialization.IncludedBuild",
        "org.gradle.api.initialization.Settings",
        "org.gradle.api.internal.AbstractTask",
        "org.gradle.api.internal.ConventionTask",
        "org.gradle.api.invocation.Gradle",
        "org.gradle.api.plugins.ApplicationPluginConvention",
        "org.gradle.api.plugins.BasePluginConvention",
        "org.gradle.api.plugins.BasePluginExtension",
        "org.gradle.api.plugins.ExtensionAware",
        "org.gradle.api.plugins.ExtraPropertiesExtension",
        "org.gradle.api.plugins.JavaApplication",
        "org.gradle.api.plugins.JavaPluginConvention",
        "org.gradle.api.plugins.JavaPluginExtension",
        "org.gradle.api.plugins.MavenPluginConvention",
        "org.gradle.api.plugins.MavenRepositoryHandlerConvention",
        "org.gradle.api.plugins.PluginAware",
        "org.gradle.api.plugins.PluginManager",
        "org.gradle.api.plugins.ProjectReportsPluginConvention",
        "org.gradle.api.plugins.WarPluginConvention",
        "org.gradle.api.plugins.antlr.AntlrSourceDirectorySet",
        "org.gradle.api.plugins.antlr.AntlrSourceVirtualDirectory",
        "org.gradle.api.plugins.antlr.AntlrTask",
        "org.gradle.api.plugins.jvm.JvmTestSuite",
        "org.gradle.api.plugins.jvm.JvmTestSuiteTarget",
        "org.gradle.api.plugins.quality.Checkstyle",
        "org.gradle.api.plugins.quality.CheckstyleExtension",
        "org.gradle.api.plugins.quality.CodeNarc",
        "org.gradle.api.plugins.quality.CodeNarcExtension",
        "org.gradle.api.plugins.quality.CodeQualityExtension",
        "org.gradle.api.plugins.quality.Pmd",
        "org.gradle.api.plugins.quality.PmdExtension",
        "org.gradle.api.plugins.sonar.SonarAnalyze",
        "org.gradle.api.publish.PublicationArtifact",
        "org.gradle.api.publish.PublicationContainer",
        "org.gradle.api.publish.PublishingExtension",
        "org.gradle.api.publish.ivy.IvyArtifact",
        "org.gradle.api.publish.ivy.IvyArtifactSet",
        "org.gradle.api.publish.ivy.IvyModuleDescriptorAuthor",
        "org.gradle.api.publish.ivy.IvyModuleDescriptorDescription",
        "org.gradle.api.publish.ivy.IvyModuleDescriptorLicense",
        "org.gradle.api.publish.ivy.IvyModuleDescriptorSpec",
        "org.gradle.api.publish.ivy.IvyPublication",
        "org.gradle.api.publish.ivy.tasks.GenerateIvyDescriptor",
        "org.gradle.api.publish.ivy.tasks.PublishToIvyRepository",
        "org.gradle.api.publish.maven.MavenArtifact",
        "org.gradle.api.publish.maven.MavenArtifactSet",
        "org.gradle.api.publish.maven.MavenPom",
        "org.gradle.api.publish.maven.MavenPomCiManagement",
        "org.gradle.api.publish.maven.MavenPomContributor",
        "org.gradle.api.publish.maven.MavenPomContributorSpec",
        "org.gradle.api.publish.maven.MavenPomDeveloper",
        "org.gradle.api.publish.maven.MavenPomDeveloperSpec",
        "org.gradle.api.publish.maven.MavenPomDistributionManagement",
        "org.gradle.api.publish.maven.MavenPomIssueManagement",
        "org.gradle.api.publish.maven.MavenPomLicense",
        "org.gradle.api.publish.maven.MavenPomLicenseSpec",
        "org.gradle.api.publish.maven.MavenPomMailingList",
        "org.gradle.api.publish.maven.MavenPomMailingListSpec",
        "org.gradle.api.publish.maven.MavenPomOrganization",
        "org.gradle.api.publish.maven.MavenPomRelocation",
        "org.gradle.api.publish.maven.MavenPomScm",
        "org.gradle.api.publish.maven.MavenPublication",
        "org.gradle.api.publish.maven.tasks.AbstractPublishToMaven",
        "org.gradle.api.publish.maven.tasks.GenerateMavenPom",
        "org.gradle.api.publish.maven.tasks.PublishToMavenRepository",
        "org.gradle.api.reporting.CustomizableHtmlReport",
        "org.gradle.api.reporting.DirectoryReport",
        "org.gradle.api.reporting.GenerateBuildDashboard",
        "org.gradle.api.reporting.Report",
        "org.gradle.api.reporting.ReportContainer",
        "org.gradle.api.reporting.Reporting",
        "org.gradle.api.reporting.ReportingExtension",
        "org.gradle.api.reporting.SingleFileReport",
        "org.gradle.api.reporting.components.ComponentReport",
        "org.gradle.api.reporting.dependencies.HtmlDependencyReportTask",
        "org.gradle.api.reporting.dependents.DependentComponentsReport",
        "org.gradle.api.reporting.model.ModelReport",
        "org.gradle.api.resources.ResourceHandler",
        "org.gradle.api.resources.TextResource",
        "org.gradle.api.resources.TextResourceFactory",
        "org.gradle.api.tasks.AbstractCopyTask",
        "org.gradle.api.tasks.AbstractExecTask",
        "org.gradle.api.tasks.Copy",
        "org.gradle.api.tasks.Delete",
        "org.gradle.api.tasks.Directory",
        "org.gradle.api.tasks.Exec",
        "org.gradle.api.tasks.GradleBuild",
        "org.gradle.api.tasks.GroovyRuntime",
        "org.gradle.api.tasks.GroovySourceDirectorySet",
        "org.gradle.api.tasks.GroovySourceSet",
        "org.gradle.api.tasks.JavaExec",
        "org.gradle.api.tasks.ScalaRuntime",
        "org.gradle.api.tasks.ScalaSourceDirectorySet",
        "org.gradle.api.tasks.ScalaSourceSet",
        "org.gradle.api.tasks.SourceSet",
        "org.gradle.api.tasks.SourceSetOutput",
        "org.gradle.api.tasks.SourceTask",
        "org.gradle.api.tasks.Sync",
        "org.gradle.api.tasks.TaskCollection",
        "org.gradle.api.tasks.TaskContainer",
        "org.gradle.api.tasks.Upload",
        "org.gradle.api.tasks.WriteProperties",
        "org.gradle.api.tasks.bundling.AbstractArchiveTask",
        "org.gradle.api.tasks.bundling.Jar",
        "org.gradle.api.tasks.bundling.Tar",
        "org.gradle.api.tasks.bundling.War",
        "org.gradle.api.tasks.bundling.Zip",
        "org.gradle.api.tasks.compile.AbstractCompile",
        "org.gradle.api.tasks.compile.AbstractOptions",
        "org.gradle.api.tasks.compile.BaseForkOptions",
        "org.gradle.api.tasks.compile.Compile",
        "org.gradle.api.tasks.compile.CompileOptions",
        "org.gradle.api.tasks.compile.ForkOptions",
        "org.gradle.api.tasks.compile.GroovyCompile",
        "org.gradle.api.tasks.compile.GroovyCompileOptions",
        "org.gradle.api.tasks.compile.GroovyForkOptions",
        "org.gradle.api.tasks.compile.JavaCompile",
        "org.gradle.api.tasks.compile.ProviderAwareCompilerDaemonForkOptions",
        "org.gradle.api.tasks.diagnostics.AbstractDependencyReportTask",
        "org.gradle.api.tasks.diagnostics.AbstractReportTask",
        "org.gradle.api.tasks.diagnostics.BuildEnvironmentReportTask",
        "org.gradle.api.tasks.diagnostics.ConventionReportTask",
        "org.gradle.api.tasks.diagnostics.DependencyInsightReportTask",
        "org.gradle.api.tasks.diagnostics.DependencyReportTask",
        "org.gradle.api.tasks.diagnostics.ProjectBasedReportTask",
        "org.gradle.api.tasks.diagnostics.ProjectReportTask",
        "org.gradle.api.tasks.diagnostics.PropertyReportTask",
        "org.gradle.api.tasks.diagnostics.TaskReportTask",
        "org.gradle.api.tasks.incremental.IncrementalTaskInputs",
        "org.gradle.api.tasks.incremental.InputFile",
        "org.gradle.api.tasks.javadoc.Groovydoc",
        "org.gradle.api.tasks.javadoc.Javadoc",
        "org.gradle.api.tasks.scala.ScalaCompile",
        "org.gradle.api.tasks.scala.ScalaCompileOptions",
        "org.gradle.api.tasks.scala.ScalaDoc",
        "org.gradle.api.tasks.scala.ScalaForkOptions",
        "org.gradle.api.tasks.testing.AbstractTestTask",
        "org.gradle.api.tasks.testing.Test",
        "org.gradle.api.tasks.testing.TestReport",
        "org.gradle.api.tasks.testing.logging.TestLogging",
        "org.gradle.api.tasks.testing.logging.TestLoggingContainer",
        "org.gradle.api.tasks.wrapper.Wrapper",
        "org.gradle.authentication.Authentication",
        "org.gradle.authentication.http.BasicAuthentication",
        "org.gradle.authentication.http.DigestAuthentication",
        "org.gradle.authentication.http.HttpHeaderAuthentication",
        "org.gradle.buildinit.tasks.InitBuild",
        "org.gradle.caching.configuration.AbstractBuildCache",
        "org.gradle.caching.configuration.BuildCacheConfiguration",
        "org.gradle.caching.http.HttpBuildCache",
        "org.gradle.caching.local.DirectoryBuildCache",
        "org.gradle.ide.visualstudio.VisualStudioExtension",
        "org.gradle.ide.visualstudio.VisualStudioProject",
        "org.gradle.ide.visualstudio.VisualStudioRootExtension",
        "org.gradle.ide.visualstudio.VisualStudioSolution",
        "org.gradle.ide.visualstudio.tasks.GenerateFiltersFileTask",
        "org.gradle.ide.visualstudio.tasks.GenerateProjectFileTask",
        "org.gradle.ide.visualstudio.tasks.GenerateSolutionFileTask",
        "org.gradle.ide.xcode.XcodeExtension",
        "org.gradle.ide.xcode.XcodeRootExtension",
        "org.gradle.ide.xcode.tasks.GenerateSchemeFileTask",
        "org.gradle.ide.xcode.tasks.GenerateWorkspaceSettingsFileTask",
        "org.gradle.ide.xcode.tasks.GenerateXcodeProjectFileTask",
        "org.gradle.ide.xcode.tasks.GenerateXcodeWorkspaceFileTask",
        "org.gradle.jvm.application.tasks.CreateStartScripts",
        "org.gradle.jvm.tasks.Jar",
        "org.gradle.jvm.toolchain.JavaToolChain",
        "org.gradle.language.ComponentWithBinaries",
        "org.gradle.language.ComponentWithTargetMachines",
        "org.gradle.language.assembler.AssemblerSourceSet",
        "org.gradle.language.assembler.tasks.Assemble",
        "org.gradle.language.base.FunctionalSourceSet",
        "org.gradle.language.base.LanguageSourceSet",
        "org.gradle.language.base.ProjectSourceSet",
        "org.gradle.language.c.CSourceSet",
        "org.gradle.language.c.tasks.CCompile",
        "org.gradle.language.coffeescript.CoffeeScriptSourceSet",
        "org.gradle.language.cpp.CppApplication",
        "org.gradle.language.cpp.CppComponent",
        "org.gradle.language.cpp.CppLibrary",
        "org.gradle.language.cpp.CppSourceSet",
        "org.gradle.language.cpp.ProductionCppComponent",
        "org.gradle.language.cpp.plugins.CppPlugin",
        "org.gradle.language.cpp.tasks.CppCompile",
        "org.gradle.language.javascript.JavaScriptSourceSet",
        "org.gradle.language.nativeplatform.DependentSourceSet",
        "org.gradle.language.nativeplatform.HeaderExportingSourceSet",
        "org.gradle.language.nativeplatform.tasks.AbstractNativeCompileTask",
        "org.gradle.language.nativeplatform.tasks.AbstractNativeSourceCompileTask",
        "org.gradle.language.objectivec.ObjectiveCSourceSet",
        "org.gradle.language.objectivec.tasks.ObjectiveCCompile",
        "org.gradle.language.objectivecpp.ObjectiveCppSourceSet",
        "org.gradle.language.objectivecpp.tasks.ObjectiveCppCompile",
        "org.gradle.language.rc.WindowsResourceSet",
        "org.gradle.language.rc.tasks.WindowsResourceCompile",
        "org.gradle.language.routes.RoutesSourceSet",
        "org.gradle.language.scala.tasks.AbstractScalaCompile",
        "org.gradle.language.scala.tasks.BaseScalaCompileOptions",
        "org.gradle.language.swift.ProductionSwiftComponent",
        "org.gradle.language.swift.SwiftApplication",
        "org.gradle.language.swift.SwiftComponent",
        "org.gradle.language.swift.SwiftLibrary",
        "org.gradle.language.swift.tasks.SwiftCompile",
        "org.gradle.language.twirl.TwirlSourceSet",
        "org.gradle.model.ModelElement",
        "org.gradle.nativeplatform.BuildType",
        "org.gradle.nativeplatform.BuildTypeContainer",
        "org.gradle.nativeplatform.Flavor",
        "org.gradle.nativeplatform.FlavorContainer",
        "org.gradle.nativeplatform.NativeBinary",
        "org.gradle.nativeplatform.NativeBinarySpec",
        "org.gradle.nativeplatform.NativeComponentExtension",
        "org.gradle.nativeplatform.NativeComponentSpec",
        "org.gradle.nativeplatform.NativeExecutable",
        "org.gradle.nativeplatform.NativeExecutableBinary",
        "org.gradle.nativeplatform.NativeExecutableBinarySpec",
        "org.gradle.nativeplatform.NativeExecutableSpec",
        "org.gradle.nativeplatform.NativeLibrary",
        "org.gradle.nativeplatform.NativeLibraryBinary",
        "org.gradle.nativeplatform.NativeLibraryBinarySpec",
        "org.gradle.nativeplatform.NativeLibrarySpec",
        "org.gradle.nativeplatform.PrebuiltLibrary",
        "org.gradle.nativeplatform.PrebuiltSharedLibraryBinary",
        "org.gradle.nativeplatform.PrebuiltStaticLibraryBinary",
        "org.gradle.nativeplatform.PreprocessingTool",
        "org.gradle.nativeplatform.SharedLibraryBinary",
        "org.gradle.nativeplatform.SharedLibraryBinarySpec",
        "org.gradle.nativeplatform.StaticLibraryBinary",
        "org.gradle.nativeplatform.StaticLibraryBinarySpec",
        "org.gradle.nativeplatform.TargetedNativeComponent",
        "org.gradle.nativeplatform.Tool",
        "org.gradle.nativeplatform.platform.NativePlatform",
        "org.gradle.nativeplatform.platform.PlatformContainer",
        "org.gradle.nativeplatform.tasks.AbstractLinkTask",
        "org.gradle.nativeplatform.tasks.CreateStaticLibrary",
        "org.gradle.nativeplatform.tasks.InstallExecutable",
        "org.gradle.nativeplatform.tasks.LinkExecutable",
        "org.gradle.nativeplatform.tasks.LinkMachOBundle",
        "org.gradle.nativeplatform.tasks.LinkSharedLibrary",
        "org.gradle.nativeplatform.test.NativeTestSuiteBinarySpec",
        "org.gradle.nativeplatform.test.NativeTestSuiteSpec",
        "org.gradle.nativeplatform.test.TestSuiteComponent",
        "org.gradle.nativeplatform.test.TestSuiteContainer",
        "org.gradle.nativeplatform.test.cpp.CppTestSuite",
        "org.gradle.nativeplatform.test.cpp.TestSuiteComponent",
        "org.gradle.nativeplatform.test.cunit.CUnitTestSuiteBinarySpec",
        "org.gradle.nativeplatform.test.cunit.CUnitTestSuiteSpec",
        "org.gradle.nativeplatform.test.googletest.GoogleTestTestSuiteBinarySpec",
        "org.gradle.nativeplatform.test.googletest.GoogleTestTestSuiteSpec",
        "org.gradle.nativeplatform.test.tasks.RunTestExecutable",
        "org.gradle.nativeplatform.test.xctest.SwiftXCTestSuite",
        "org.gradle.nativeplatform.test.xctest.tasks.InstallXCTestBundle",
        "org.gradle.nativeplatform.test.xctest.tasks.XCTest",
        "org.gradle.nativeplatform.toolchain.Clang",
        "org.gradle.nativeplatform.toolchain.ConfigurableToolChain",
        "org.gradle.nativeplatform.toolchain.Gcc",
        "org.gradle.nativeplatform.toolchain.GccCompatibleToolChain",
        "org.gradle.nativeplatform.toolchain.PlatformConfigurableToolChain",
        "org.gradle.nativeplatform.toolchain.Swiftc",
        "org.gradle.nativeplatform.toolchain.ToolChainRegistry",
        "org.gradle.nativeplatform.toolchain.VisualCpp",
        "org.gradle.nativeplatform.toolchain.plugins.GppCompilerPlugin",
        "org.gradle.nativeplatform.toolchain.plugins.MicrosoftVisualCppPlugin",
        "org.gradle.normalization.InputNormalization",
        "org.gradle.normalization.InputNormalizationHandler",
        "org.gradle.normalization.RuntimeClasspathNormalization",
        "org.gradle.platform.base.Application",
        "org.gradle.platform.base.Binary",
        "org.gradle.platform.base.BinaryContainer",
        "org.gradle.platform.base.BinarySpec",
        "org.gradle.platform.base.ComponentSpec",
        "org.gradle.platform.base.ComponentSpecContainer",
        "org.gradle.platform.base.Library",
        "org.gradle.platform.base.LibrarySpec",
        "org.gradle.platform.base.PlatformAwareComponentSpec",
        "org.gradle.platform.base.SourceComponentSpec",
        "org.gradle.platform.base.ToolChain",
        "org.gradle.platform.base.VariantComponentSpec",
        "org.gradle.play.JvmClasses",
        "org.gradle.play.PlayApplicationBinarySpec",
        "org.gradle.play.PlayApplicationSpec",
        "org.gradle.play.PublicAssets",
        "org.gradle.play.distribution.PlayDistributionContainer",
        "org.gradle.play.platform.PlayPlatform",
        "org.gradle.play.tasks.JavaScriptMinify",
        "org.gradle.play.tasks.PlayCoffeeScriptCompile",
        "org.gradle.play.tasks.PlayRun",
        "org.gradle.play.tasks.RoutesCompile",
        "org.gradle.play.tasks.TwirlCompile",
        "org.gradle.play.toolchain.PlayToolChain",
        "org.gradle.plugin.management.PluginManagementSpec",
        "org.gradle.plugin.repository.GradlePluginPortal",
        "org.gradle.plugin.repository.IvyPluginRepository",
        "org.gradle.plugin.repository.MavenPluginRepository",
        "org.gradle.plugin.repository.PluginRepositoriesSpec",
        "org.gradle.plugin.repository.PluginRepository",
        "org.gradle.plugin.use.PluginDependenciesSpec",
        "org.gradle.plugin.use.PluginDependencySpec",
        "org.gradle.plugins.ear.Ear",
        "org.gradle.plugins.ear.EarPluginConvention",
        "org.gradle.plugins.ide.api.FileContentMerger",
        "org.gradle.plugins.ide.api.GeneratorTask",
        "org.gradle.plugins.ide.api.PropertiesFileContentMerger",
        "org.gradle.plugins.ide.api.PropertiesGeneratorTask",
        "org.gradle.plugins.ide.api.PropertyListGeneratorTask",
        "org.gradle.plugins.ide.apiFileContentMerger",
        "org.gradle.plugins.ide.apiGeneratorTask",
        "org.gradle.plugins.ide.eclipse.GenerateEclipseClasspath",
        "org.gradle.plugins.ide.eclipse.GenerateEclipseJdt",
        "org.gradle.plugins.ide.eclipse.GenerateEclipseProject",
        "org.gradle.plugins.ide.eclipse.GenerateEclipseWtpComponent",
        "org.gradle.plugins.ide.eclipse.GenerateEclipseWtpFacet",
        "org.gradle.plugins.ide.eclipse.model.EclipseClasspath",
        "org.gradle.plugins.ide.eclipse.model.EclipseJdt",
        "org.gradle.plugins.ide.eclipse.model.EclipseModel",
        "org.gradle.plugins.ide.eclipse.model.EclipseProject",
        "org.gradle.plugins.ide.eclipse.model.EclipseWtp",
        "org.gradle.plugins.ide.eclipse.model.EclipseWtpComponent",
        "org.gradle.plugins.ide.eclipse.model.EclipseWtpFacet",
        "org.gradle.plugins.ide.idea.GenerateIdeaModule",
        "org.gradle.plugins.ide.idea.GenerateIdeaProject",
        "org.gradle.plugins.ide.idea.GenerateIdeaWorkspace",
        "org.gradle.plugins.ide.idea.model.IdeaModel",
        "org.gradle.plugins.ide.idea.model.IdeaModule",
        "org.gradle.plugins.ide.idea.model.IdeaProject",
        "org.gradle.plugins.ide.idea.model.IdeaWorkspace",
        "org.gradle.plugins.javascript.coffeescript.CoffeeScriptCompile",
        "org.gradle.plugins.signing.Sign",
        "org.gradle.plugins.signing.SigningExtension",
        "org.gradle.testing.base.TestSuite",
        "org.gradle.testing.base.TestSuiteTarget",
        "org.gradle.testing.base.TestingExtension",
        "org.gradle.testing.jacoco.plugins.JacocoPluginExtension",
        "org.gradle.testing.jacoco.plugins.JacocoTaskExtension",
        "org.gradle.testing.jacoco.tasks.JacocoBase",
        "org.gradle.testing.jacoco.tasks.JacocoCoverageVerification",
        "org.gradle.testing.jacoco.tasks.JacocoMerge",
        "org.gradle.testing.jacoco.tasks.JacocoReport",
        "org.gradle.testing.jacoco.tasks.JacocoReportBase",
        "org.gradle.work.InputChanges"
        );

    @PathSensitive(PathSensitivity.NONE)
    @InputFile
    public abstract RegularFileProperty getClassMetaDataFile();

    @OutputDirectory
    public abstract DirectoryProperty getDestinationDirectory();

    @Inject
    public abstract FileSystemOperations getFileSystemOperations();

    @TaskAction
    public void generateAsciidocs() throws IOException {
        SimpleClassMetaDataRepository<ClassMetaData> classRepository = new SimpleClassMetaDataRepository<>();
        classRepository.load(getClassMetaDataFile().get().getAsFile());
        Path destinationDirectory = getDestinationDirectory().get().getAsFile().toPath();
        getFileSystemOperations().delete(spec -> spec.delete(destinationDirectory));
        Files.createDirectories(destinationDirectory);
        DslDocRenderer generator = new DslDocRenderer();
        classRepository.each(classMetaData -> {
            if (SELECTED_CLASSES.contains(classMetaData.getClassName())) {
                try (Writer writer = Files.newBufferedWriter(destinationDirectory.resolve(classMetaData.getClassName() + ".adoc"))) {
                    generator.mergeContent(classMetaData, writer);
                } catch (Exception e) {
                    throw new RuntimeException(e);
                }
            }
        });
    }
}
